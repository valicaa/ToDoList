/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ToDoList {
  export type ToDoStruct = {
    id: BigNumberish;
    name: string;
    description: string;
    deadline: BigNumberish;
    completed: boolean;
    deleted: boolean;
  };

  export type ToDoStructOutput = [
    id: bigint,
    name: string,
    description: string,
    deadline: bigint,
    completed: boolean,
    deleted: boolean
  ] & {
    id: bigint;
    name: string;
    description: string;
    deadline: bigint;
    completed: boolean;
    deleted: boolean;
  };
}

export interface ToDoListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTodo"
      | "deleteToDo"
      | "getToDos"
      | "todoLists"
      | "toggleCompleted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createTodo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteToDo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getToDos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "todoLists",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleCompleted",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createTodo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteToDo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToDos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "todoLists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleCompleted",
    data: BytesLike
  ): Result;
}

export interface ToDoList extends BaseContract {
  connect(runner?: ContractRunner | null): ToDoList;
  waitForDeployment(): Promise<this>;

  interface: ToDoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTodo: TypedContractMethod<
    [_name: string, _description: string, _deadline: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteToDo: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getToDos: TypedContractMethod<[], [ToDoList.ToDoStructOutput[]], "view">;

  todoLists: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, boolean] & {
        id: bigint;
        name: string;
        description: string;
        deadline: bigint;
        completed: boolean;
        deleted: boolean;
      }
    ],
    "view"
  >;

  toggleCompleted: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTodo"
  ): TypedContractMethod<
    [_name: string, _description: string, _deadline: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteToDo"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getToDos"
  ): TypedContractMethod<[], [ToDoList.ToDoStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "todoLists"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, boolean] & {
        id: bigint;
        name: string;
        description: string;
        deadline: bigint;
        completed: boolean;
        deleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "toggleCompleted"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  filters: {};
}
